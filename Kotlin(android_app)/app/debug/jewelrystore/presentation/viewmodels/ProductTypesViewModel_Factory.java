// Generated by Dagger (https://dagger.dev).
package com.sysoliatina.jewelrystore.presentation.viewmodels;

import com.sysoliatina.jewelrystore.data.common.CommonRepository;
import com.sysoliatina.jewelrystore.data.moderator.ModeratorRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ProductTypesViewModel_Factory implements Factory<ProductTypesViewModel> {
  private final Provider<ModeratorRepository> moderatorRepositoryProvider;

  private final Provider<CommonRepository> commonRepositoryProvider;

  public ProductTypesViewModel_Factory(Provider<ModeratorRepository> moderatorRepositoryProvider,
      Provider<CommonRepository> commonRepositoryProvider) {
    this.moderatorRepositoryProvider = moderatorRepositoryProvider;
    this.commonRepositoryProvider = commonRepositoryProvider;
  }

  @Override
  public ProductTypesViewModel get() {
    return newInstance(moderatorRepositoryProvider.get(), commonRepositoryProvider.get());
  }

  public static ProductTypesViewModel_Factory create(
      Provider<ModeratorRepository> moderatorRepositoryProvider,
      Provider<CommonRepository> commonRepositoryProvider) {
    return new ProductTypesViewModel_Factory(moderatorRepositoryProvider, commonRepositoryProvider);
  }

  public static ProductTypesViewModel newInstance(ModeratorRepository moderatorRepository,
      CommonRepository commonRepository) {
    return new ProductTypesViewModel(moderatorRepository, commonRepository);
  }
}
