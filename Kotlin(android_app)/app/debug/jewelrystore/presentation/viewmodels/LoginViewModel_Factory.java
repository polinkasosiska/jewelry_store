// Generated by Dagger (https://dagger.dev).
package com.sysoliatina.jewelrystore.presentation.viewmodels;

import com.sysoliatina.jewelrystore.domain.login.AuthIfPossibleUseCase;
import com.sysoliatina.jewelrystore.domain.login.AuthUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LoginViewModel_Factory implements Factory<LoginViewModel> {
  private final Provider<AuthUseCase> authUseCaseProvider;

  private final Provider<AuthIfPossibleUseCase> authIfPossibleUseCaseProvider;

  public LoginViewModel_Factory(Provider<AuthUseCase> authUseCaseProvider,
      Provider<AuthIfPossibleUseCase> authIfPossibleUseCaseProvider) {
    this.authUseCaseProvider = authUseCaseProvider;
    this.authIfPossibleUseCaseProvider = authIfPossibleUseCaseProvider;
  }

  @Override
  public LoginViewModel get() {
    return newInstance(authUseCaseProvider.get(), authIfPossibleUseCaseProvider.get());
  }

  public static LoginViewModel_Factory create(Provider<AuthUseCase> authUseCaseProvider,
      Provider<AuthIfPossibleUseCase> authIfPossibleUseCaseProvider) {
    return new LoginViewModel_Factory(authUseCaseProvider, authIfPossibleUseCaseProvider);
  }

  public static LoginViewModel newInstance(AuthUseCase authUseCase,
      AuthIfPossibleUseCase authIfPossibleUseCase) {
    return new LoginViewModel(authUseCase, authIfPossibleUseCase);
  }
}
