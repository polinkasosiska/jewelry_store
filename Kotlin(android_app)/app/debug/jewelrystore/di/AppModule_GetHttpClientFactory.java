// Generated by Dagger (https://dagger.dev).
package com.sysoliatina.jewelrystore.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_GetHttpClientFactory implements Factory<OkHttpClient.Builder> {
  private final Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider;

  public AppModule_GetHttpClientFactory(
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider) {
    this.httpLoggingInterceptorProvider = httpLoggingInterceptorProvider;
  }

  @Override
  public OkHttpClient.Builder get() {
    return getHttpClient(httpLoggingInterceptorProvider.get());
  }

  public static AppModule_GetHttpClientFactory create(
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider) {
    return new AppModule_GetHttpClientFactory(httpLoggingInterceptorProvider);
  }

  public static OkHttpClient.Builder getHttpClient(HttpLoggingInterceptor httpLoggingInterceptor) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.getHttpClient(httpLoggingInterceptor));
  }
}
