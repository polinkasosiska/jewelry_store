// Generated by Dagger (https://dagger.dev).
package com.sysoliatina.jewelrystore.domain.login;

import com.sysoliatina.jewelrystore.sharedPreferences.PrefsUtils;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AuthIfPossibleUseCase_Factory implements Factory<AuthIfPossibleUseCase> {
  private final Provider<AuthUseCase> authUseCaseProvider;

  private final Provider<PrefsUtils> prefsUtilsProvider;

  public AuthIfPossibleUseCase_Factory(Provider<AuthUseCase> authUseCaseProvider,
      Provider<PrefsUtils> prefsUtilsProvider) {
    this.authUseCaseProvider = authUseCaseProvider;
    this.prefsUtilsProvider = prefsUtilsProvider;
  }

  @Override
  public AuthIfPossibleUseCase get() {
    return newInstance(authUseCaseProvider.get(), prefsUtilsProvider.get());
  }

  public static AuthIfPossibleUseCase_Factory create(Provider<AuthUseCase> authUseCaseProvider,
      Provider<PrefsUtils> prefsUtilsProvider) {
    return new AuthIfPossibleUseCase_Factory(authUseCaseProvider, prefsUtilsProvider);
  }

  public static AuthIfPossibleUseCase newInstance(AuthUseCase authUseCase, PrefsUtils prefsUtils) {
    return new AuthIfPossibleUseCase(authUseCase, prefsUtils);
  }
}
